{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"tAutoRig Documentation","text":"<p>tAutoRig is a maya pluggin that allows you to create a rig for a character in a few clicks. It also contains a few tools to help you in different steps of the rigging process.</p>"},{"location":"#table-of-contents","title":"Table of Contents","text":"<ul> <li>Supported Types</li> <li>Commands :<ul> <li>tAutoRig</li> <li>tAutoRigNodeEditor</li> <li>mkPath</li> </ul> </li> <li>Nodes :<ul> <li>Execution :<ul> <li>onRun</li> </ul> </li> </ul> </li> </ul>"},{"location":"supportedTypes/","title":"bool","text":"<p>type : <code>bool</code></p> <p>Attribute class : <code>BoolAttribute</code></p> <p>Description : This type is used to represent a boolean value. It can be either <code>true</code> or <code>false</code>.</p> <p>Implemented : Yes</p>"},{"location":"supportedTypes/#int","title":"int","text":"<p>type : <code>int</code></p> <p>Attribute class : <code>IntAttribute</code></p> <p>Description : This type is used to represent an integer value. It can be either positive or negative.</p> <p>Implemented : Yes</p> <p>Color : Color</p>"},{"location":"supportedTypes/#double","title":"double","text":"<p>type : <code>double</code></p> <p>Attribute class : <code>DoubleAttribute</code></p> <p>Description : This type is used to represent a floating point value. It can be either positive or negative.</p> <p>Implemented : Yes</p>"},{"location":"supportedTypes/#string","title":"string","text":"<p>type : <code>string</code></p> <p>Attribute class : <code>StringAttribute</code></p> <p>Description : This type is used to represent a string value. It can be any sequence of characters.</p> <p>Implemented : Yes</p>"},{"location":"supportedTypes/#list","title":"list","text":"<p>type : <code>list</code></p> <p>Attribute class : <code>ListAttribute</code></p> <p>Description : This type is used to represent a list of values. It can be any type listed here.</p> <p>Implemented : Yes</p>"},{"location":"supportedTypes/#map","title":"map","text":"<p>type : <code>map</code></p> <p>Attribute class : <code>MapAttribute</code></p> <p>Description : This type is used to represent a map of key-value pairs. The key is always a string and the value can be any type listed here.</p> <p>Implemented : Yes</p>"},{"location":"supportedTypes/#vector2","title":"vector2","text":"<p>type : <code>vector2</code></p> <p>Attribute class : <code>Vector2Attribute</code></p> <p>Description : This type is used to represent a 2D vector. It has two components, <code>x</code> and <code>y</code>. The coponents are of type <code>double</code>.</p> <p>Implemented : Yes</p>"},{"location":"supportedTypes/#vector3","title":"vector3","text":"<p>type : <code>vector3</code></p> <p>Attribute class : <code>Vector3Attribute</code></p> <p>Description : This type is used to represent a 3D vector. It has three components, <code>x</code>, <code>y</code> and <code>z</code>. The coponents are of type <code>double</code>.</p> <p>Implemented : Yes</p>"},{"location":"supportedTypes/#vector4","title":"vector4","text":"<p>type : <code>vector4</code></p> <p>Attribute class : <code>Vector4Attribute</code></p> <p>Description : This type is used to represent a 4D vector. It has four components, <code>x</code>, <code>y</code>, <code>z</code> and <code>w</code>. The coponents are of type <code>double</code>.</p> <p>Implemented : Yes</p>"},{"location":"supportedTypes/#matrix","title":"matrix","text":"<p>type : <code>matrix</code></p> <p>Attribute class : <code>MatrixAttribute</code></p> <p>Description : This type is used to represent a matrix. The size is 3x3. The elements are of type <code>double</code>. The components are named <code>m11</code>, <code>m12</code>, <code>m13</code>, <code>m21</code>, <code>m22</code>, <code>m23</code>, <code>m31</code>, <code>m32</code>, <code>m33</code>.</p> <p>Implemented : Yes</p>"},{"location":"supportedTypes/#color","title":"color","text":"<p>type : <code>color</code></p> <p>Attribute class : <code>ColorAttribute</code></p> <p>Description : This type is used to represent a color. It has four components, <code>r</code>, <code>g</code>, <code>b</code> and <code>a</code>. The components are of type <code>double</code>.</p> <p>Implemented : Yes</p>"},{"location":"supportedTypes/#quaternion","title":"quaternion","text":"<p>type : <code>quaternion</code></p> <p>Attribute class : <code>QuaternionAttribute</code></p> <p>Description : This type is used to represent a quaternion. It has four components, <code>x</code>, <code>y</code>, <code>z</code> and <code>w</code>. The components are of type <code>double</code>.</p> <p>Implemented : Yes</p>"},{"location":"supportedTypes/#rect","title":"rect","text":"<p>type : <code>rect</code></p> <p>Attribute class : <code>RectAttribute</code></p> <p>Description : This type is used to represent a rectangle. It has four components, <code>x</code>, <code>y</code>, <code>width</code> and <code>height</code>. The components are of type <code>double</code>.</p> <p>Implemented : Yes</p>"},{"location":"supportedTypes/#box","title":"box","text":"<p>type : <code>box</code></p> <p>Attribute class : <code>BoxAttribute</code></p> <p>Description : This type is used to represent a box. It has six components, <code>x</code>, <code>y</code>, <code>z</code>, <code>width</code>, <code>height</code> and <code>depth</code>. The components are of type <code>double</code>.</p> <p>Implemented : Yes</p>"},{"location":"supportedTypes/#enum","title":"enum","text":"<p>type : <code>enum</code></p> <p>Attribute class : <code>EnumAttribute</code></p> <p>Description : This type is used to represent an enumeration. It can be any of the values defined in the enumeration.</p> <p>Implemented : No</p>"},{"location":"supportedTypes/#object","title":"object","text":"<p>type : <code>object</code></p> <p>Attribute class : <code>ObjectAttribute</code></p> <p>Description : This type is used to represent an object. It can be any type listed here or any type from maya.</p> <p>Implemented : No</p>"},{"location":"supportedTypes/#data-conversion","title":"Data Conversion","text":"<p>The following table shows the possible conversions between the different types in the node editor.</p> From To  Notes  int bool  Only works if the value of the integer is equal to 0 or 1, otherwise return false.  int double int string int enum  Set the value of the enum to index of the integer.  double int double bool  Only works if the value of the double is equal to 0.0 or 1.0, otherwise return false.  double string double enum  Set the value of the enum to index of the double.  string int  Try to convert the string to an integer. If it fails, return 0.  string double  Try to convert the string to a double. If it fails, return 0.0.  string bool  Try to convert the string to a boolean. Works with 'false', 'False', '0', 'true', 'True', '1'. If it fails, return false.  string enum  Set the value of the enum item corresponding to the string. Otherwise, set the value to the first item.  string color  Try to convert the string to a color. If it fails, return black (#000000).  string vector2  Try to convert the string to a vector2. Must be in the format 'x.0,y.0'. If it fails, return (0.0,0.0)."},{"location":"commands/mkPath/","title":"mkPath","text":""},{"location":"commands/mkPath/#mel-command","title":"Mel Command","text":"<pre><code>mkPath &lt;string&gt;\n</code></pre>"},{"location":"commands/mkPath/#description","title":"Description","text":"<p>Create a path of group in the scene.</p>"},{"location":"commands/mkPath/#arguments","title":"Arguments","text":"<ul> <li>&lt;string&gt; : The path to create. Separated by a pipe '|'. Example: \"root|spine|chest|neck|head\".</li> </ul>"},{"location":"commands/mkPath/#examples","title":"Examples","text":"<pre><code>mkPath \"root|spine|chest|neck|head\"  \n// Result : Create the group hierarchy in the scene.\n</code></pre>"},{"location":"commands/tAutoRig/","title":"tAutoRig","text":""},{"location":"commands/tAutoRig/#mel-command","title":"Mel Command","text":"<pre><code>tAutoRig\n</code></pre>"},{"location":"commands/tAutoRig/#description","title":"Description","text":"<p>Opens the tAutoRig window.</p> <p>The window automatically try to load the last rig created in the scene or create a new one if none is found.</p>"},{"location":"commands/tAutoRig/#arguments","title":"Arguments","text":"<p>None</p>"},{"location":"commands/tAutoRig/#see-also","title":"See Also","text":"<ul> <li>tAutoRigNodeEditor</li> </ul>"},{"location":"commands/tAutoRigNodeEditor/","title":"tAutoRigNodeEditor","text":""},{"location":"commands/tAutoRigNodeEditor/#mel-command","title":"Mel Command","text":"<pre><code>tAutoRigNodeEditor [-o &lt;string&gt;] [-template] [-script]\n</code></pre>"},{"location":"commands/tAutoRigNodeEditor/#description","title":"Description","text":"<p>Opens the node editor window.</p> <p>This window is used to create or edit the rig templates, or node scripts.</p>"},{"location":"commands/tAutoRigNodeEditor/#arguments","title":"Arguments","text":"<ul> <li> <p>-o &lt;string&gt; : Open a file in the node editor.</p> </li> <li> <p>-template : Open the node editor in template mode.</p> </li> <li> <p>-script : Open the node editor in script mode.</p> </li> </ul>"},{"location":"commands/tAutoRigNodeEditor/#examples","title":"Examples","text":"<pre><code>tAutoRigNodeEditor -o \"C:/path/to/file.json\"\n</code></pre> <pre><code>tAutoRigNodeEditor -o \"&lt;templates&gt;/Spine/spine.json\"\n</code></pre> <pre><code>tAutoRigNodeEditor -template\n</code></pre> <pre><code>tAutoRigNodeEditor -script\n</code></pre>"},{"location":"commands/tAutoRigNodeEditor/#see-also","title":"See Also","text":"<ul> <li>tAutoRig</li> </ul>"},{"location":"nodes/Execution/onRun/","title":"onRun","text":""},{"location":"nodes/Execution/onRun/#description","title":"Description","text":"<p>This node is used as a starter node for the rigging process. It will execute the rigging process or the script from this node by default.</p> <p>Is a flow node : <code>Yes</code></p> <p>Combo Key : <code>or</code></p> <p>Group : <code>Execution</code></p> <p>Available in : <code>Script</code> &amp; <code>Template</code></p>"},{"location":"nodes/Execution/onRun/#attributes","title":"Attributes","text":"Identifier Name Type Default  Description"},{"location":"nodes/Execution/onRun/#left-inputs","title":"Left Inputs","text":"Identifier Type  Description"},{"location":"nodes/Execution/onRun/#right-outputs","title":"Right Outputs","text":"Identifier Type  Description  output_0 flow Trigger the next node in the flow."},{"location":"nodes/Primitives/vector3Primitive/","title":"vector3","text":""},{"location":"nodes/Primitives/vector3Primitive/#description","title":"Description","text":"<p>Is a flow node : <code>No</code></p> <p>Combo key : <code>v3</code></p> <p>Group : <code>Primitives</code></p> <p>Available in : </p>"},{"location":"nodes/Primitives/vector3Primitive/#attributes","title":"Attributes","text":"IdentifierNameTypeDefaultDescription valuevaluevector3"},{"location":"nodes/Primitives/vector3Primitive/#left-inputs","title":"Left Inputs","text":"IdentifierTypeDescription"},{"location":"nodes/Primitives/vector3Primitive/#right-outputs","title":"Right Outputs","text":"IdentifierTypeDescription value_0vector3"},{"location":"nodes/Template%20Management/placementLocator/","title":"Placement Locator","text":""},{"location":"nodes/Template%20Management/placementLocator/#description","title":"Description","text":"<p>Is a flow node : <code>Yes</code></p> <p>Combo key : <code>none</code></p> <p>Group : <code>Template Management</code></p> <p>Available in : </p>"},{"location":"nodes/Template%20Management/placementLocator/#attributes","title":"Attributes","text":"IdentifierNameTypeDefaultDescription"},{"location":"nodes/Template%20Management/placementLocator/#left-inputs","title":"Left Inputs","text":"IdentifierTypeDescription flow_inflow positionvector3"},{"location":"nodes/Template%20Management/placementLocator/#right-outputs","title":"Right Outputs","text":"IdentifierTypeDescription flow_outflow"}]}